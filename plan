주제 : 가짜 사이트 접속을 방지해주는 크롬 확장 프로그램

주제 선정 이유 : 멀티 타이징, SEO 포이즈닝 방식으로 검색창 상단에 피싱 사이트를 노출시켜 악성 프로그램을 다운받게 하는 위험이 최근에 많아짐으로서 이를 방지하기 위해 확장 프로그램을 통해 해결해 보려고 함


1. 구글 검색했을 때, 화면에서 하이퍼 링크 걸린 항목들을 수집한 후, 검증이 된 사이트만 표시를 하는 방법

2. 사용자가 링크에 접속했을 때, 올바른 링크로 접속했는지 확인하는 방법

2번과 1번 모두 활용할 예정.
2번을 우선적으로 구현


---

### 1. **프로젝트 계획**
- **목표 정의**  
  - 확장 프로그램의 주요 기능 정의:
    - 가짜 사이트 탐지 및 경고.
    - 사용자가 안전하지 않은 사이트에 접속하지 못하도록 차단.
    - 가짜 사이트 목록의 업데이트 기능.

- **기술 스택 선정**  
  - 확장 프로그램 개발 언어: HTML, CSS, JavaScript, json
  - 데이터베이스(피싱 사이트 목록): Google Safe Browsing API 또는 오픈소스 피싱 사이트 데이터 활용.

---

### 2. **데이터 수집 및 분석**
- **피싱 사이트 데이터베이스 확보**  
  - Google Safe Browsing API를 사용해 최신 피싱 및 악성 사이트 목록 조회.
  - PhishTank 또는 OpenPhish 같은 오픈 데이터베이스 활용.

- **멀티 타이핑 및 SEO 포이즈닝 방식 이해**  
  - 피싱 사이트의 주요 특성 분석: URL 패턴, 메타데이터, HTTP 헤더.

---

### 3. **기능 설계**
- **기본 기능**
  - **URL 필터링**  
    사용자가 접속하려는 URL을 피싱 사이트 데이터베이스와 비교하여 차단.
  - **경고 페이지 표시**  
    가짜 사이트로 의심될 경우 사용자에게 경고 메시지 표시.
  - **화이트리스트 및 블랙리스트**  
    사용자가 신뢰하거나 차단하려는 사이트를 직접 추가할 수 있는 기능 제공.  (whowho 서비스와 비슷)

- **추가 기능**
  - **실시간 탐지**  
    AI 기반으로 사이트를 분석하여 의심스러운 활동 탐지.
  - **안전 점수 표시**  
    사이트의 보안 점수를 확장 프로그램 아이콘에 표시.
  - **사용자 보고 기능**  
    새로운 가짜 사이트를 사용자들이 직접 신고할 수 있도록 지원.

---

### 4. **개발**
- **크롬 확장 프로그램 기본 구조**
  - **manifest.json**  
    확장 프로그램의 설정 파일로 필요한 권한, 파일 경로 정의.
  - **background script**  
    확장 프로그램의 백그라운드 작업 처리.
  - **content script**  
    사용자가 방문한 사이트 정보를 수집하고 탐지 로직 실행.
  - **popup UI**  
    사용자가 확장 프로그램을 제어할 수 있는 인터페이스.

- **API 통합**
  - Google Safe Browsing API 또는 기타 데이터베이스와 통신 기능 구현.

---

### 5. **테스트 및 배포**
- **테스트**
  - 다양한 실제 피싱 사이트와 정상 사이트에서 확장 프로그램의 탐지 정확도 확인.
  - UI/UX 테스트로 사용자 친화적 경험 제공.

- **배포**
  - 크롬 웹 스토어에 확장 프로그램 등록.
  - 사용자 피드백을 통해 지속적으로 개선.

---

### 6. **유지보수 및 확장**
- **데이터 업데이트**  
  - 주기적으로 피싱 사이트 목록 갱신.
- **기능 업데이트**  
  - 추가적인 보안 기능 도입(예: 브라우저 내 암호 관리 보안 강화).
- **다른 브라우저 확장**  
  - 파이어폭스, 엣지 같은 다른 브라우저에서도 사용할 수 있도록 확장.

---

### 기대 결과
이 확장 프로그램이 성공적으로 배포되면:
- 사용자가 피싱 사이트에 접속하는 위험이 줄어들고 보안이 강화됨.
- 피싱 사이트를 차단함으로써 악성 프로그램 감염 사례 감소.

위 계획에 따라 진행하면서 필요한 구체적인 코드나 질문이 있다면 언제든지 도와드리겠습니다!




2. 사용자가 접속한 링크 실시간 검증
방법 개요:

사용자가 링크를 클릭하거나 특정 웹사이트에 접속할 때 해당 URL을 분석.
URL의 신뢰도를 평가하고, 의심스러운 경우 경고 메시지를 표시.

장점:
사용자가 직접 접속한 링크를 검증하므로 구글 검색뿐만 아니라 모든 상황에 대응 가능.
비교적 구현이 간단하며, 실시간으로 URL을 체크 가능.

단점:
사용자가 이미 클릭한 이후에야 경고 가능.
모든 URL 요청을 모니터링해야 하므로 성능에 영향을 줄 가능성 있음.

기술 요구 사항:
URL 모니터링 및 분석 기술.
피싱 및 악성 사이트를 식별하기 위한 알고리즘(예: URL 패턴 분석, DNS 레코드 확인).
실시간 경고 메시지 표시.
